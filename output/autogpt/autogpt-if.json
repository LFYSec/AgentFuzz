{"AIShortformVideoCreatorBlock.create_webhook -> requests.post": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.wait_for_video", "expr": "status.get(\"status\") == \"ready\" and \"videoUrl\" in status", "start_line": 250}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.wait_for_video", "expr": "status.get(\"status\") == \"error\"", "start_line": 252}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.wait_for_video", "expr": "status.get(\"status\") in [\"FAILED\", \"CANCELED\"]", "start_line": 256}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.run", "expr": "not pid", "start_line": 309}], "AIShortformVideoCreatorBlock.run -> AIShortformVideoCreatorBlock.create_webhook -> requests.post": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.run", "expr": "not pid", "start_line": 309}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.wait_for_video", "expr": "status.get(\"status\") == \"ready\" and \"videoUrl\" in status", "start_line": 250}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.wait_for_video", "expr": "status.get(\"status\") == \"error\"", "start_line": 252}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.wait_for_video", "expr": "status.get(\"status\") in [\"FAILED\", \"CANCELED\"]", "start_line": 256}], "AIShortformVideoCreatorBlock.run -> AIShortformVideoCreatorBlock.create_video -> requests.post": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.run", "expr": "not pid", "start_line": 309}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.wait_for_video", "expr": "status.get(\"status\") == \"ready\" and \"videoUrl\" in status", "start_line": 250}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.wait_for_video", "expr": "status.get(\"status\") == \"error\"", "start_line": 252}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.wait_for_video", "expr": "status.get(\"status\") in [\"FAILED\", \"CANCELED\"]", "start_line": 256}], "AIShortformVideoCreatorBlock.run -> AIShortformVideoCreatorBlock.wait_for_video -> AIShortformVideoCreatorBlock.check_video_status -> requests.get": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.run", "expr": "not pid", "start_line": 309}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.wait_for_video", "expr": "status.get(\"status\") == \"ready\" and \"videoUrl\" in status", "start_line": 250}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.wait_for_video", "expr": "status.get(\"status\") == \"error\"", "start_line": 252}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.wait_for_video", "expr": "status.get(\"status\") in [\"FAILED\", \"CANCELED\"]", "start_line": 256}], "AIShortformVideoCreatorBlock.create_video -> requests.post": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.wait_for_video", "expr": "status.get(\"status\") == \"ready\" and \"videoUrl\" in status", "start_line": 250}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.wait_for_video", "expr": "status.get(\"status\") == \"error\"", "start_line": 252}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.wait_for_video", "expr": "status.get(\"status\") in [\"FAILED\", \"CANCELED\"]", "start_line": 256}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.run", "expr": "not pid", "start_line": 309}], "AIShortformVideoCreatorBlock.check_video_status -> requests.get": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.wait_for_video", "expr": "status.get(\"status\") == \"ready\" and \"videoUrl\" in status", "start_line": 250}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.wait_for_video", "expr": "status.get(\"status\") == \"error\"", "start_line": 252}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.wait_for_video", "expr": "status.get(\"status\") in [\"FAILED\", \"CANCELED\"]", "start_line": 256}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.run", "expr": "not pid", "start_line": 309}], "AIShortformVideoCreatorBlock.wait_for_video -> AIShortformVideoCreatorBlock.check_video_status -> requests.get": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.wait_for_video", "expr": "status.get(\"status\") == \"ready\" and \"videoUrl\" in status", "start_line": 250}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.wait_for_video", "expr": "status.get(\"status\") == \"error\"", "start_line": 252}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.wait_for_video", "expr": "status.get(\"status\") in [\"FAILED\", \"CANCELED\"]", "start_line": 256}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ai_shortform_video_block.py", "module_name": "ai_shortform_video_block", "func_name": "AIShortformVideoCreatorBlock.run", "expr": "not pid", "start_line": 309}], "AgentOutputBlock.run -> jinja.from_string": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/basic.py", "module_name": "basic", "func_name": "AgentOutputBlock.run", "expr": "input_data.format", "start_line": 305}], "JinaChunkingBlock.run -> requests.post": [], "populate_db -> requests.post": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/cli.py", "module_name": "cli", "func_name": "populate_db", "expr": "response.status_code == 200", "start_line": 144}], "graph -> requests.post": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/cli.py", "module_name": "cli", "func_name": "graph", "expr": "response.status_code == 200", "start_line": 176}], "ReadDiscordMessagesBlock.run_bot.on_message -> session.get": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/discord.py", "module_name": "discord", "func_name": "ReadDiscordMessagesBlock.run_bot.on_message", "expr": "message.author == client.user", "start_line": 94}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/discord.py", "module_name": "discord", "func_name": "ReadDiscordMessagesBlock.run_bot.on_message", "expr": "message.attachments", "start_line": 101}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/discord.py", "module_name": "discord", "func_name": "ReadDiscordMessagesBlock.run_bot.on_message", "expr": "attachment.filename.endswith((\".txt\", \".py\"))", "start_line": 103}], "GitHubOAuthHandler.exchange_code_for_tokens -> GitHubOAuthHandler._request_tokens -> requests.post": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/integrations/oauth/github.py", "module_name": "github", "func_name": "GitHubOAuthHandler._request_username", "expr": "not response.ok", "start_line": 135}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/integrations/oauth/github.py", "module_name": "github", "func_name": "GitHubOAuthHandler._refresh_tokens", "expr": "not credentials.refresh_token", "start_line": 69}], "GitHubOAuthHandler.exchange_code_for_tokens -> GitHubOAuthHandler._request_tokens -> GitHubOAuthHandler._request_username -> requests.get": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/integrations/oauth/github.py", "module_name": "github", "func_name": "GitHubOAuthHandler._refresh_tokens", "expr": "not credentials.refresh_token", "start_line": 69}], "GitHubOAuthHandler._refresh_tokens -> GitHubOAuthHandler._request_tokens -> requests.post": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/integrations/oauth/github.py", "module_name": "github", "func_name": "GitHubOAuthHandler._refresh_tokens", "expr": "not credentials.refresh_token", "start_line": 69}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/integrations/oauth/github.py", "module_name": "github", "func_name": "GitHubOAuthHandler._request_username", "expr": "not response.ok", "start_line": 135}], "GitHubOAuthHandler._refresh_tokens -> GitHubOAuthHandler._request_tokens -> GitHubOAuthHandler._request_username -> requests.get": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/integrations/oauth/github.py", "module_name": "github", "func_name": "GitHubOAuthHandler._refresh_tokens", "expr": "not credentials.refresh_token", "start_line": 69}], "GitHubOAuthHandler._request_tokens -> requests.post": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/integrations/oauth/github.py", "module_name": "github", "func_name": "GitHubOAuthHandler._request_username", "expr": "not response.ok", "start_line": 135}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/integrations/oauth/github.py", "module_name": "github", "func_name": "GitHubOAuthHandler._refresh_tokens", "expr": "not credentials.refresh_token", "start_line": 69}], "GitHubOAuthHandler._request_tokens -> GitHubOAuthHandler._request_username -> requests.get": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/integrations/oauth/github.py", "module_name": "github", "func_name": "GitHubOAuthHandler._refresh_tokens", "expr": "not credentials.refresh_token", "start_line": 69}], "GitHubOAuthHandler._request_username -> requests.get": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/integrations/oauth/github.py", "module_name": "github", "func_name": "GitHubOAuthHandler._refresh_tokens", "expr": "not credentials.refresh_token", "start_line": 69}], "SendWebRequestBlock.run -> requests.request": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/http.py", "module_name": "http", "func_name": "SendWebRequestBlock.run", "expr": "isinstance(input_data.body, str)", "start_line": 59}], "GetRequest.get_request -> requests.get": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/helpers/http.py", "module_name": "http", "func_name": "GetRequest.get_request", "expr": "headers is None", "start_line": 11}], "IdeogramModelBlock.run -> IdeogramModelBlock.run_model -> requests.post": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ideogram.py", "module_name": "ideogram", "func_name": "IdeogramModelBlock.run", "expr": "input_data.upscale == UpscaleOption.AI_UPSCALE", "start_line": 199}], "IdeogramModelBlock.run -> IdeogramModelBlock.upscale_image -> requests.get": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ideogram.py", "module_name": "ideogram", "func_name": "IdeogramModelBlock.run", "expr": "input_data.upscale == UpscaleOption.AI_UPSCALE", "start_line": 199}], "IdeogramModelBlock.run -> IdeogramModelBlock.upscale_image -> requests.post": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ideogram.py", "module_name": "ideogram", "func_name": "IdeogramModelBlock.run", "expr": "input_data.upscale == UpscaleOption.AI_UPSCALE", "start_line": 199}], "IdeogramModelBlock.run_model -> requests.post": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ideogram.py", "module_name": "ideogram", "func_name": "IdeogramModelBlock.run_model", "expr": "seed is not None", "start_line": 235}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ideogram.py", "module_name": "ideogram", "func_name": "IdeogramModelBlock.run_model", "expr": "negative_prompt", "start_line": 238}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ideogram.py", "module_name": "ideogram", "func_name": "IdeogramModelBlock.run_model", "expr": "color_palette_name != \"NONE\"", "start_line": 241}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ideogram.py", "module_name": "ideogram", "func_name": "IdeogramModelBlock.run", "expr": "input_data.upscale == UpscaleOption.AI_UPSCALE", "start_line": 199}], "IdeogramModelBlock.upscale_image -> requests.get": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ideogram.py", "module_name": "ideogram", "func_name": "IdeogramModelBlock.run", "expr": "input_data.upscale == UpscaleOption.AI_UPSCALE", "start_line": 199}], "IdeogramModelBlock.upscale_image -> requests.post": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/ideogram.py", "module_name": "ideogram", "func_name": "IdeogramModelBlock.run", "expr": "input_data.upscale == UpscaleOption.AI_UPSCALE", "start_line": 199}], "PublishToMediumBlock.create_post -> requests.post": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/medium.py", "module_name": "medium", "func_name": "PublishToMediumBlock.run", "expr": "\"data\" in response", "start_line": 188}], "PublishToMediumBlock.run -> PublishToMediumBlock.create_post -> requests.post": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/medium.py", "module_name": "medium", "func_name": "PublishToMediumBlock.run", "expr": "\"data\" in response", "start_line": 188}], "CreateTalkingAvatarVideoBlock.create_clip -> requests.post": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/talking_head.py", "module_name": "talking_head", "func_name": "CreateTalkingAvatarVideoBlock.run", "expr": "status_response[\"status\"] == \"done\"", "start_line": 159}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/talking_head.py", "module_name": "talking_head", "func_name": "CreateTalkingAvatarVideoBlock.run", "expr": "status_response[\"status\"] == \"error\"", "start_line": 162}], "CreateTalkingAvatarVideoBlock.run -> CreateTalkingAvatarVideoBlock.create_clip -> requests.post": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/talking_head.py", "module_name": "talking_head", "func_name": "CreateTalkingAvatarVideoBlock.run", "expr": "status_response[\"status\"] == \"done\"", "start_line": 159}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/talking_head.py", "module_name": "talking_head", "func_name": "CreateTalkingAvatarVideoBlock.run", "expr": "status_response[\"status\"] == \"error\"", "start_line": 162}], "CreateTalkingAvatarVideoBlock.run -> CreateTalkingAvatarVideoBlock.get_clip_status -> requests.get": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/talking_head.py", "module_name": "talking_head", "func_name": "CreateTalkingAvatarVideoBlock.run", "expr": "status_response[\"status\"] == \"done\"", "start_line": 159}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/talking_head.py", "module_name": "talking_head", "func_name": "CreateTalkingAvatarVideoBlock.run", "expr": "status_response[\"status\"] == \"error\"", "start_line": 162}], "CreateTalkingAvatarVideoBlock.get_clip_status -> requests.get": [{"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/talking_head.py", "module_name": "talking_head", "func_name": "CreateTalkingAvatarVideoBlock.run", "expr": "status_response[\"status\"] == \"done\"", "start_line": 159}, {"file_path": "E:/Codes/AutoGPT/autogpt_platform/backend/backend/blocks/talking_head.py", "module_name": "talking_head", "func_name": "CreateTalkingAvatarVideoBlock.run", "expr": "status_response[\"status\"] == \"error\"", "start_line": 162}]}
{"start_webserver -> _run_current_with_daemon -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/command_utils.py", "sink": "Popen", "line": 35, "expr": "subprocess.Popen(            daemon_cmd,            creationflags=subprocess.CREATE_NEW_PROCESS_GROUP,            stdout=subprocess.DEVNULL,            stderr=subprocess.DEVNULL,            shell=True,        )"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/command_utils.py", "sink": "Popen", "line": 43, "expr": "subprocess.Popen(            daemon_cmd,            preexec_fn=os.setsid,            stdout=subprocess.DEVNULL,            stderr=subprocess.DEVNULL,            shell=True,        )"}], "APIMixin._heartbeat_checker -> APIMixin._check_and_update_health -> APIMixin._check_health -> get": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/api_utils.py", "sink": "get", "line": 68, "expr": "requests.get(req_url, timeout=10)"}], "APIMixin._check_health -> get": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/api_utils.py", "sink": "get", "line": 68, "expr": "requests.get(req_url, timeout=10)"}], "APIMixin._check_and_update_health -> APIMixin._check_health -> get": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/api_utils.py", "sink": "get", "line": 68, "expr": "requests.get(req_url, timeout=10)"}], "_api_remote.decorator.wrapper -> request": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/api_utils.py", "sink": "request", "line": 223, "expr": "client.request(**request_params)"}], "_sync_api_remote.decorator.wrapper -> request": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/api_utils.py", "sink": "request", "line": 257, "expr": "requests.request(**request_params)"}], "baichuan_generate_stream -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/model/proxy/llms/baichuan.py", "sink": "post", "line": 53, "expr": "requests.post(url=url, json=payload, headers=headers)"}], "main -> baichuan_generate_stream -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/model/proxy/llms/baichuan.py", "sink": "post", "line": 53, "expr": "requests.post(url=url, json=payload, headers=headers)"}], "bard_generate_stream -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/model/proxy/llms/bard.py", "sink": "post", "line": 51, "expr": "requests.post(            proxy_server_url, headers=headers, json=payloads, stream=False        )"}], "RDBMSConnector.get_current_db_name -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 168, "expr": "self.session.execute(text(\"SELECT DATABASE()\"))"}], "RDBMSConnector.table_simple_info -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 177, "expr": "self.session.execute(text(_sql))"}], "RDBMSConnector.table_simple_info -> RDBMSConnector.get_current_db_name -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 168, "expr": "self.session.execute(text(\"SELECT DATABASE()\"))"}], "RDBMSConnector._write -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 299, "expr": "self.session.execute(text(write_sql))"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 303, "expr": "self.session.execute(text(f\"use `{db_cache}`\"))"}], "RDBMSConnector._query -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 319, "expr": "self.session.execute(text(query))"}], "RDBMSConnector.query_table_schema -> RDBMSConnector._query -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 319, "expr": "self.session.execute(text(query))"}], "RDBMSConnector.query_ex -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 356, "expr": "self.session.execute(text(query))"}], "RDBMSConnector.run -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 389, "expr": "self.session.execute(text(command))"}], "RDBMSConnector.run -> RDBMSConnector._write -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 299, "expr": "self.session.execute(text(write_sql))"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 303, "expr": "self.session.execute(text(f\"use `{db_cache}`\"))"}], "RDBMSConnector.run -> RDBMSConnector._query -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 319, "expr": "self.session.execute(text(query))"}], "RDBMSConnector.run -> RDBMSConnector.get_simple_fields -> RDBMSConnector._query -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 319, "expr": "self.session.execute(text(query))"}], "RDBMSConnector.run_to_df -> RDBMSConnector.run -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 389, "expr": "self.session.execute(text(command))"}], "RDBMSConnector.run_to_df -> RDBMSConnector.run -> RDBMSConnector._write -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 299, "expr": "self.session.execute(text(write_sql))"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 303, "expr": "self.session.execute(text(f\"use `{db_cache}`\"))"}], "RDBMSConnector.run_to_df -> RDBMSConnector.run -> RDBMSConnector._query -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 319, "expr": "self.session.execute(text(query))"}], "RDBMSConnector.run_to_df -> RDBMSConnector.run -> RDBMSConnector.get_simple_fields -> RDBMSConnector._query -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 319, "expr": "self.session.execute(text(query))"}], "RDBMSConnector.run_no_throw -> RDBMSConnector.run -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 389, "expr": "self.session.execute(text(command))"}], "RDBMSConnector.run_no_throw -> RDBMSConnector.run -> RDBMSConnector._write -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 299, "expr": "self.session.execute(text(write_sql))"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 303, "expr": "self.session.execute(text(f\"use `{db_cache}`\"))"}], "RDBMSConnector.run_no_throw -> RDBMSConnector.run -> RDBMSConnector._query -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 319, "expr": "self.session.execute(text(query))"}], "RDBMSConnector.run_no_throw -> RDBMSConnector.run -> RDBMSConnector.get_simple_fields -> RDBMSConnector._query -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 319, "expr": "self.session.execute(text(query))"}], "RDBMSConnector.get_show_create_table -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 531, "expr": "session.execute(text(f\"SHOW CREATE TABLE  {table_name}\"))"}], "RDBMSConnector.get_fields -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 545, "expr": "session.execute(text(query))"}], "RDBMSConnector.get_simple_fields -> RDBMSConnector._query -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 319, "expr": "self.session.execute(text(query))"}], "RDBMSConnector.get_charset -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 556, "expr": "session.execute(text(\"SELECT @@character_set_database\"))"}], "RDBMSConnector.get_collation -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 563, "expr": "session.execute(text(\"SELECT @@collation_database\"))"}], "RDBMSConnector.get_grants -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 570, "expr": "session.execute(text(\"SHOW GRANTS\"))"}], "RDBMSConnector.get_users -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 577, "expr": "self.session.execute(text(\"SELECT user, host FROM mysql.user\"))"}], "RDBMSConnector.get_table_comments -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 585, "expr": "self.session.execute(            text(                f\"\"\"SELECT table_name, table_comment    FROM information_schema.tables                    WHERE table_schema = '{db_name}'\"\"\".format(                    db_name                )            )        )"}], "RDBMSConnector.get_column_comments -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 610, "expr": "self.session.execute(            text(                f\"\"\"SELECT column_name, column_comment FROM information_schema.columns                    WHERE table_schema = '{db_name}' and table_name = '{table_name}'                \"\"\".format(                    db_name, table_name                )            )        )"}], "RDBMSConnector.get_database_names -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/base.py", "sink": "execute", "line": 631, "expr": "session.execute(text(\" show databases;\"))"}], "BrianSpeech._speech -> get": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/speech/brian.py", "sink": "get", "line": 30, "expr": "requests.get(tts_url)"}], "ChatHistoryDao.get_hot_app_map -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/storage/chat_history/chat_history_db.py", "sink": "execute", "line": 188, "expr": "session.execute(                    text(                        f\"\"\"SELECT c.app_code, count(*) as sz FROM chat_history a    INNER JOIN chat_history_message b on a.conv_uid = b.conv_uid    INNER JOIN gpts_app c ON a.app_code = c.app_code and c.published = 'true'    GROUP BY c.app_code    ORDER BY sz desc  LIMIT {str(skip_page)}, {str(top_k)};\"\"\"                    )                )"}], "start_model_controller -> _run_current_with_daemon -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/command_utils.py", "sink": "Popen", "line": 35, "expr": "subprocess.Popen(            daemon_cmd,            creationflags=subprocess.CREATE_NEW_PROCESS_GROUP,            stdout=subprocess.DEVNULL,            stderr=subprocess.DEVNULL,            shell=True,        )"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/command_utils.py", "sink": "Popen", "line": 43, "expr": "subprocess.Popen(            daemon_cmd,            preexec_fn=os.setsid,            stdout=subprocess.DEVNULL,            stderr=subprocess.DEVNULL,            shell=True,        )"}], "start_model_worker -> _run_current_with_daemon -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/command_utils.py", "sink": "Popen", "line": 35, "expr": "subprocess.Popen(            daemon_cmd,            creationflags=subprocess.CREATE_NEW_PROCESS_GROUP,            stdout=subprocess.DEVNULL,            stderr=subprocess.DEVNULL,            shell=True,        )"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/command_utils.py", "sink": "Popen", "line": 43, "expr": "subprocess.Popen(            daemon_cmd,            preexec_fn=os.setsid,            stdout=subprocess.DEVNULL,            stderr=subprocess.DEVNULL,            shell=True,        )"}], "start_apiserver -> _run_current_with_daemon -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/command_utils.py", "sink": "Popen", "line": 35, "expr": "subprocess.Popen(            daemon_cmd,            creationflags=subprocess.CREATE_NEW_PROCESS_GROUP,            stdout=subprocess.DEVNULL,            stderr=subprocess.DEVNULL,            shell=True,        )"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/command_utils.py", "sink": "Popen", "line": 43, "expr": "subprocess.Popen(            daemon_cmd,            preexec_fn=os.setsid,            stdout=subprocess.DEVNULL,            stderr=subprocess.DEVNULL,            shell=True,        )"}], "check_poetry_installed -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/cli.py", "sink": "run", "line": 16, "expr": "subprocess.run(            [\"poetry\", \"--version\"],            check=True,            stdout=subprocess.DEVNULL,            stderr=subprocess.DEVNULL,        )"}], "install -> check_poetry_installed -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/cli.py", "sink": "run", "line": 16, "expr": "subprocess.run(            [\"poetry\", \"--version\"],            check=True,            stdout=subprocess.DEVNULL,            stderr=subprocess.DEVNULL,        )"}], "install -> install -> copy_and_install -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "run", "line": 327, "expr": "subprocess.run([\"poetry\", \"build\"], check=True)"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "run", "line": 334, "expr": "subprocess.run([\"pip\", \"install\", str(wheel_file)], check=True)"}], "install -> install -> check_with_retry -> update_repo -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "run", "line": 200, "expr": "subprocess.run([\"git\", \"pull\"], check=False)"}], "install -> install -> check_with_retry -> update_repo -> add_repo -> clone_repo -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "Popen", "line": 168, "expr": "subprocess.Popen(        clone_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE    )"}], "uninstall -> uninstall -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "run", "line": 232, "expr": "subprocess.run([\"pip\", \"uninstall\", name, \"-y\"], check=True)"}], "list_all_apps -> list_repo_apps -> update_repo -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "run", "line": 200, "expr": "subprocess.run([\"git\", \"pull\"], check=False)"}], "list_all_apps -> list_repo_apps -> update_repo -> add_repo -> clone_repo -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "Popen", "line": 168, "expr": "subprocess.Popen(        clone_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE    )"}], "add_repo -> add_repo -> clone_repo -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "Popen", "line": 168, "expr": "subprocess.Popen(        clone_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE    )"}], "update_repo -> update_repo -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "run", "line": 200, "expr": "subprocess.run([\"git\", \"pull\"], check=False)"}], "update_repo -> update_repo -> add_repo -> clone_repo -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "Popen", "line": 168, "expr": "subprocess.Popen(        clone_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE    )"}], "new_dbgpts -> check_poetry_installed -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/cli.py", "sink": "run", "line": 16, "expr": "subprocess.run(            [\"poetry\", \"--version\"],            check=True,            stdout=subprocess.DEVNULL,            stderr=subprocess.DEVNULL,        )"}], "CodeAction.run -> CodeAction.execute_code_blocks -> execute_code -> submit": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/code_utils.py", "sink": "submit", "line": 260, "expr": "executor.submit(                    subprocess.run,                    cmd,                    cwd=work_dir,                    capture_output=True,                    text=True,                )"}], "CodeAction.run -> CodeAction.execute_code_blocks -> execute_code -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/code_utils.py", "sink": "run", "line": 252, "expr": "subprocess.run(                cmd,                cwd=work_dir,                capture_output=True,                text=True,            )"}], "CodeAction.execute_code_blocks -> execute_code -> submit": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/code_utils.py", "sink": "submit", "line": 260, "expr": "executor.submit(                    subprocess.run,                    cmd,                    cwd=work_dir,                    capture_output=True,                    text=True,                )"}], "CodeAction.execute_code_blocks -> execute_code -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/code_utils.py", "sink": "run", "line": 252, "expr": "subprocess.run(                cmd,                cwd=work_dir,                capture_output=True,                text=True,            )"}], "execute_code -> submit": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/code_utils.py", "sink": "submit", "line": 260, "expr": "executor.submit(                    subprocess.run,                    cmd,                    cwd=work_dir,                    capture_output=True,                    text=True,                )"}], "execute_code -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/code_utils.py", "sink": "run", "line": 252, "expr": "subprocess.run(                cmd,                cwd=work_dir,                capture_output=True,                text=True,            )"}], "eval_function_completions -> execute_code -> submit": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/code_utils.py", "sink": "submit", "line": 260, "expr": "executor.submit(                    subprocess.run,                    cmd,                    cwd=work_dir,                    capture_output=True,                    text=True,                )"}], "eval_function_completions -> execute_code -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/code_utils.py", "sink": "run", "line": 252, "expr": "subprocess.run(                cmd,                cwd=work_dir,                capture_output=True,                text=True,            )"}], "_run_current_with_daemon -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/command_utils.py", "sink": "Popen", "line": 35, "expr": "subprocess.Popen(            daemon_cmd,            creationflags=subprocess.CREATE_NEW_PROCESS_GROUP,            stdout=subprocess.DEVNULL,            stderr=subprocess.DEVNULL,            shell=True,        )"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/command_utils.py", "sink": "Popen", "line": 43, "expr": "subprocess.Popen(            daemon_cmd,            preexec_fn=os.setsid,            stdout=subprocess.DEVNULL,            stderr=subprocess.DEVNULL,            shell=True,        )"}], "_run_current_with_gunicorn -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/command_utils.py", "sink": "Popen", "line": 73, "expr": "subprocess.Popen(cmd, shell=True, env=env_to_app)"}], "DorisConnector._sync_tables_from_db -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_doris.py", "sink": "execute", "line": 36, "expr": "self.get_session().execute(            text(                \"SELECT TABLE_NAME FROM information_schema.tables where \"                \"TABLE_SCHEMA=database()\"            )        )"}], "DorisConnector.get_grants -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_doris.py", "sink": "execute", "line": 49, "expr": "self.get_session().execute(text(\"SHOW GRANTS\"))"}], "DorisConnector._get_current_version -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_doris.py", "sink": "execute", "line": 62, "expr": "self.get_session().execute(text(\"select current_version()\"))"}], "DorisConnector.get_collation -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_doris.py", "sink": "execute", "line": 72, "expr": "self.get_session().execute(text(\"SHOW COLLATION\"))"}], "DorisConnector.get_columns -> DorisConnector.get_fields -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_doris.py", "sink": "execute", "line": 105, "expr": "self.get_session().execute(            text(                \"select COLUMN_NAME, COLUMN_TYPE, COLUMN_DEFAULT, IS_NULLABLE, \"                \"COLUMN_COMMENT from information_schema.columns \"                f'where TABLE_NAME=\"{table_name}\" and TABLE_SCHEMA=database()'            )        )"}], "DorisConnector.get_fields -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_doris.py", "sink": "execute", "line": 105, "expr": "self.get_session().execute(            text(                \"select COLUMN_NAME, COLUMN_TYPE, COLUMN_DEFAULT, IS_NULLABLE, \"                \"COLUMN_COMMENT from information_schema.columns \"                f'where TABLE_NAME=\"{table_name}\" and TABLE_SCHEMA=database()'            )        )"}], "DorisConnector.get_show_create_table -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_doris.py", "sink": "execute", "line": 130, "expr": "self.get_session().execute(            text(                f\"SELECT TABLE_COMMENT \"                f\"FROM information_schema.tables \"                f'where TABLE_NAME=\"{table_name}\" and TABLE_SCHEMA=database()'            )        )"}], "DorisConnector.get_table_comments -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_doris.py", "sink": "execute", "line": 146, "expr": "self.get_session().execute(            text(                f\"SELECT TABLE_NAME,TABLE_COMMENT \"                f\"FROM information_schema.tables \"                f\"where TABLE_SCHEMA={db_name}\"            )        )"}], "DorisConnector.get_database_names -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_doris.py", "sink": "execute", "line": 158, "expr": "self.get_session().execute(text(\"SHOW DATABASES\"))"}], "DorisConnector.get_current_db_name -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_doris.py", "sink": "execute", "line": 176, "expr": "self.get_session().execute(text(\"select database()\"))"}], "DorisConnector.table_simple_info -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_doris.py", "sink": "execute", "line": 180, "expr": "self.get_session().execute(            text(                \"SELECT concat(TABLE_NAME,'(',group_concat(COLUMN_NAME,','),');') \"                \"FROM information_schema.columns \"                \"where TABLE_SCHEMA=database() \"                \"GROUP BY TABLE_NAME\"            )        )"}], "DorisConnector.get_indexes -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_doris.py", "sink": "execute", "line": 193, "expr": "self.get_session().execute(text(f\"SHOW INDEX FROM {table_name}\"))"}], "DuckDbConnector.get_users -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_duckdb.py", "sink": "execute", "line": 25, "expr": "self.session.execute(            text(                \"SELECT * FROM sqlite_master WHERE type = 'table' AND \"                \"name = 'duckdb_sys_users';\"            )        )"}], "DuckDbConnector.get_table_comments -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_duckdb.py", "sink": "execute", "line": 48, "expr": "self.session.execute(            text(                \"\"\"                SELECT name, sql FROM sqlite_master WHERE type='table'                \"\"\"            )        )"}], "DuckDbConnector.table_simple_info -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_duckdb.py", "sink": "execute", "line": 65, "expr": "self.session.execute(text(_tables_sql))"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_duckdb.py", "sink": "execute", "line": 73, "expr": "self.session.execute(text(_sql))"}], "MSSQLConnector.table_simple_info -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_mssql.py", "sink": "execute", "line": 24, "expr": "self.session.execute(text(_tables_sql))"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_mssql.py", "sink": "execute", "line": 33, "expr": "self.session.execute(text(_sql))"}], "PostgreSQLConnector._sync_tables_from_db -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_postgresql.py", "sink": "execute", "line": 39, "expr": "self.session.execute(            text(                \"SELECT tablename FROM pg_catalog.pg_tables WHERE \"                \"schemaname != 'pg_catalog' AND schemaname != 'information_schema'\"            )        )"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_postgresql.py", "sink": "execute", "line": 45, "expr": "self.session.execute(            text(                \"SELECT viewname FROM pg_catalog.pg_views WHERE \"                \"schemaname != 'pg_catalog' AND schemaname != 'information_schema'\"            )        )"}], "PostgreSQLConnector.get_grants -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_postgresql.py", "sink": "execute", "line": 60, "expr": "session.execute(            text(                \"\"\"                SELECT DISTINCT grantee, privilege_type                FROM information_schema.role_table_grants                WHERE grantee = CURRENT_USER;\"\"\"            )        )"}], "PostgreSQLConnector.get_collation -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_postgresql.py", "sink": "execute", "line": 75, "expr": "session.execute(                text(                    \"SELECT datcollate AS collation FROM pg_database WHERE \"                    \"datname = current_database();\"                )            )"}], "PostgreSQLConnector.get_users -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_postgresql.py", "sink": "execute", "line": 90, "expr": "self.session.execute(                text(\"SELECT rolname FROM pg_roles WHERE rolname NOT LIKE 'pg_%';\")            )"}], "PostgreSQLConnector.get_fields -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_postgresql.py", "sink": "execute", "line": 102, "expr": "session.execute(            text(                \"SELECT column_name, data_type, column_default, is_nullable, \"                \"column_name as column_comment \\                FROM information_schema.columns WHERE table_name = :table_name\",            ),            {\"table_name\": table_name},        )"}], "PostgreSQLConnector.get_charset -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_postgresql.py", "sink": "execute", "line": 116, "expr": "session.execute(            text(                \"SELECT pg_encoding_to_char(encoding) FROM pg_database WHERE \"                \"datname = current_database();\"            )        )"}], "PostgreSQLConnector.get_show_create_table -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_postgresql.py", "sink": "execute", "line": 127, "expr": "self.session.execute(            text(                f\"\"\"            SELECT a.attname as column_name,             pg_catalog.format_type(a.atttypid, a.atttypmod) as data_type            FROM pg_catalog.pg_attribute a            WHERE a.attnum > 0 AND NOT a.attisdropped AND a.attnum <= (                SELECT max(a.attnum)                FROM pg_catalog.pg_attribute a                WHERE a.attrelid = (SELECT oid FROM pg_catalog.pg_class                    WHERE relname='{table_name}')            ) AND a.attrelid = (SELECT oid FROM pg_catalog.pg_class                 WHERE relname='{table_name}')                \"\"\"            )        )"}], "PostgreSQLConnector.get_table_comments -> PostgreSQLConnector.get_show_create_table -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_postgresql.py", "sink": "execute", "line": 127, "expr": "self.session.execute(            text(                f\"\"\"            SELECT a.attname as column_name,             pg_catalog.format_type(a.atttypid, a.atttypmod) as data_type            FROM pg_catalog.pg_attribute a            WHERE a.attnum > 0 AND NOT a.attisdropped AND a.attnum <= (                SELECT max(a.attnum)                FROM pg_catalog.pg_attribute a                WHERE a.attrelid = (SELECT oid FROM pg_catalog.pg_class                    WHERE relname='{table_name}')            ) AND a.attrelid = (SELECT oid FROM pg_catalog.pg_class                 WHERE relname='{table_name}')                \"\"\"            )        )"}], "PostgreSQLConnector.get_table_comments -> PostgreSQLConnector.table_simple_info -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_postgresql.py", "sink": "execute", "line": 193, "expr": "self.session.execute(text(_sql))"}], "PostgreSQLConnector.get_database_names -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_postgresql.py", "sink": "execute", "line": 165, "expr": "session.execute(text(\"SELECT datname FROM pg_database;\"))"}], "PostgreSQLConnector.get_current_db_name -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_postgresql.py", "sink": "execute", "line": 173, "expr": "self.session.execute(text(\"SELECT current_database()\"))"}], "PostgreSQLConnector.table_simple_info -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_postgresql.py", "sink": "execute", "line": 193, "expr": "self.session.execute(text(_sql))"}], "PostgreSQLConnector.get_fields_wit_schema -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_postgresql.py", "sink": "execute", "line": 203, "expr": "session.execute(            text(                f\"\"\"                SELECT c.column_name, c.data_type, c.column_default, c.is_nullable,                 d.description FROM information_schema.columns c                 LEFT JOIN pg_catalog.pg_description d                ON (c.table_schema || '.' || c.table_name)::regclass::oid = d.objoid                 AND c.ordinal_position = d.objsubid                 WHERE c.table_name='{table_name}' AND c.table_schema='{schema_name}'                \"\"\"            )        )"}], "PostgreSQLConnector.get_indexes -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_postgresql.py", "sink": "execute", "line": 221, "expr": "session.execute(            text(                f\"SELECT indexname, indexdef FROM pg_indexes WHERE \"                f\"tablename = '{table_name}'\"            )        )"}], "SQLiteConnector.get_indexes -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_sqlite.py", "sink": "execute", "line": 36, "expr": "self.session.execute(text(f\"PRAGMA index_list({table_name})\"))"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_sqlite.py", "sink": "execute", "line": 41, "expr": "self.session.execute(text(f\"PRAGMA index_info({index_name})\"))"}], "SQLiteConnector.get_show_create_table -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_sqlite.py", "sink": "execute", "line": 49, "expr": "self.session.execute(            text(                \"SELECT sql FROM sqlite_master WHERE type='table' \"                f\"AND name='{table_name}'\"            )        )"}], "SQLiteConnector.get_fields -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_sqlite.py", "sink": "execute", "line": 60, "expr": "self.session.execute(text(f\"PRAGMA table_info('{table_name}')\"))"}], "SQLiteConnector.get_simple_fields -> SQLiteConnector.get_fields -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_sqlite.py", "sink": "execute", "line": 60, "expr": "self.session.execute(text(f\"PRAGMA table_info('{table_name}')\"))"}], "SQLiteConnector._sync_tables_from_db -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_sqlite.py", "sink": "execute", "line": 90, "expr": "self.session.execute(            text(\"SELECT name FROM sqlite_master WHERE type='table'\")        )"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_sqlite.py", "sink": "execute", "line": 93, "expr": "self.session.execute(            text(\"SELECT name FROM sqlite_master WHERE type='view'\")        )"}], "SQLiteConnector._write -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_sqlite.py", "sink": "execute", "line": 105, "expr": "session.execute(text(write_sql))"}], "SQLiteConnector.get_table_comments -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_sqlite.py", "sink": "execute", "line": 114, "expr": "self.session.execute(            text(                \"\"\"                SELECT name, sql FROM sqlite_master WHERE type='table'                \"\"\"            )        )"}], "SQLiteConnector.table_simple_info -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_sqlite.py", "sink": "execute", "line": 143, "expr": "self.session.execute(text(_tables_sql))"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_sqlite.py", "sink": "execute", "line": 151, "expr": "self.session.execute(text(_sql))"}], "SQLiteTempConnector.create_temp_tables -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_sqlite.py", "sink": "execute", "line": 253, "expr": "self.session.execute(text(create_sql))"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_sqlite.py", "sink": "execute", "line": 263, "expr": "self.session.execute(text(insert_sql), param_dict)"}], "SQLiteTempConnector.create_temp_tables -> SQLiteConnector._sync_tables_from_db -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_sqlite.py", "sink": "execute", "line": 90, "expr": "self.session.execute(            text(\"SELECT name FROM sqlite_master WHERE type='table'\")        )"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_sqlite.py", "sink": "execute", "line": 93, "expr": "self.session.execute(            text(\"SELECT name FROM sqlite_master WHERE type='view'\")        )"}], "StarRocksConnector._sync_tables_from_db -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_starrocks.py", "sink": "execute", "line": 38, "expr": "self.session.execute(            text(                \"SELECT TABLE_NAME FROM information_schema.tables where \"                f'TABLE_SCHEMA=\"{db_name}\"'            )        )"}], "StarRocksConnector._sync_tables_from_db -> StarRocksConnector.get_current_db_name -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_starrocks.py", "sink": "execute", "line": 147, "expr": "self.session.execute(text(\"select database()\"))"}], "StarRocksConnector.get_grants -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_starrocks.py", "sink": "execute", "line": 55, "expr": "session.execute(text(\"SHOW GRANTS\"))"}], "StarRocksConnector._get_current_version -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_starrocks.py", "sink": "execute", "line": 67, "expr": "self.session.execute(text(\"select current_version()\"))"}], "StarRocksConnector.get_fields -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_starrocks.py", "sink": "execute", "line": 83, "expr": "session.execute(            text(                \"select COLUMN_NAME, COLUMN_TYPE, COLUMN_DEFAULT, IS_NULLABLE, \"                \"COLUMN_COMMENT from information_schema.columns where \"                f'TABLE_NAME=\"{table_name}\" and TABLE_SCHEMA = {db_name}'            )        )"}], "StarRocksConnector.get_show_create_table -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_starrocks.py", "sink": "execute", "line": 109, "expr": "self.session.execute(            text(                \"SELECT TABLE_COMMENT FROM information_schema.tables where \"                f'TABLE_NAME=\"{table_name}\" and TABLE_SCHEMA=database()'            )        )"}], "StarRocksConnector.get_table_comments -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_starrocks.py", "sink": "execute", "line": 125, "expr": "self.session.execute(            text(                \"SELECT TABLE_NAME,TABLE_COMMENT FROM information_schema.tables \"                f'where TABLE_SCHEMA=\"{db_name}\"'            )        )"}], "StarRocksConnector.get_table_comments -> StarRocksConnector.get_current_db_name -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_starrocks.py", "sink": "execute", "line": 147, "expr": "self.session.execute(text(\"select database()\"))"}], "StarRocksConnector.get_database_names -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_starrocks.py", "sink": "execute", "line": 137, "expr": "session.execute(text(\"SHOW DATABASES;\"))"}], "StarRocksConnector.get_current_db_name -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_starrocks.py", "sink": "execute", "line": 147, "expr": "self.session.execute(text(\"select database()\"))"}], "StarRocksConnector.table_simple_info -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_starrocks.py", "sink": "execute", "line": 156, "expr": "self.session.execute(text(_sql))"}], "StarRocksConnector.get_indexes -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_starrocks.py", "sink": "execute", "line": 163, "expr": "session.execute(text(f\"SHOW INDEX FROM {table_name}\"))"}], "VerticaConnector._sync_tables_from_db -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_vertica.py", "sink": "execute", "line": 56, "expr": "self.session.execute(            text(                \"\"\"                SELECT table_schema||'.'||table_name                FROM v_catalog.tables                WHERE table_schema NOT LIKE 'v\\_%'                UNION                SELECT table_schema||'.'||table_name                FROM v_catalog.views                WHERE table_schema NOT LIKE 'v\\_%';                \"\"\"            )        )"}], "VerticaConnector.get_users -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_vertica.py", "sink": "execute", "line": 84, "expr": "self.session.execute(text(\"SELECT name FROM v_internal.vs_users;\"))"}], "VerticaConnector.get_fields -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_vertica.py", "sink": "execute", "line": 94, "expr": "session.execute(            text(                f\"\"\"                SELECT column_name, data_type, column_default, is_nullable,                  nvl(comment, column_name) as column_comment                FROM v_catalog.columns c                  LEFT JOIN v_internal.vs_sub_comments s ON c.table_id = s.objectoid                    AND c.column_name = s.childobject                WHERE table_schema||'.'||table_name = '{table_name}';                \"\"\"            )        )"}], "VerticaConnector.get_columns -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_vertica.py", "sink": "execute", "line": 122, "expr": "session.execute(            text(                f\"\"\"                SELECT c.column_name, data_type, column_default                  , (p.column_name IS NOT NULL) is_in_primary_key                  , nvl(comment, c.column_name) as column_comment                FROM v_catalog.columns c                  LEFT JOIN v_internal.vs_sub_comments s ON c.table_id = s.objectoid                    AND c.column_name = s.childobject                  LEFT JOIN v_catalog.primary_keys p ON c.table_schema = p.table_schema                    AND c.table_name = p.table_name                    AND c.column_name = p.column_name                WHERE c.table_schema||'.'||c.table_name = '{table_name}';                \"\"\"            )        )"}], "VerticaConnector.get_show_create_table -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_vertica.py", "sink": "execute", "line": 156, "expr": "self.session.execute(            text(                f\"\"\"                SELECT column_name, data_type                FROM v_catalog.columns                WHERE table_schema||'.'||table_name = '{table_name}';                \"\"\"            )        )"}], "VerticaConnector.get_table_comments -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_vertica.py", "sink": "execute", "line": 176, "expr": "self.session.execute(            text(                f\"\"\"                SELECT table_schema||'.'||table_name                  , nvl(comment, table_name) as column_comment                FROM v_catalog.tables t                  LEFT JOIN v_internal.vs_comments c ON t.table_id = c.objectoid                WHERE table_schema = '{db_name}'                \"\"\"            )        )"}], "VerticaConnector.get_table_comment -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_vertica.py", "sink": "execute", "line": 200, "expr": "self.session.execute(            text(                f\"\"\"                SELECT nvl(comment, table_name) as column_comment                FROM v_catalog.tables t                  LEFT JOIN v_internal.vs_comments c ON t.table_id = c.objectoid                WHERE table_schema||'.'||table_nam e= '{table_name}'                \"\"\"            )        )"}], "VerticaConnector.get_column_comments -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_vertica.py", "sink": "execute", "line": 214, "expr": "self.session.execute(            text(                f\"\"\"                SELECT column_name, nvl(comment, column_name) as column_comment                FROM v_catalog.columns c                  LEFT JOIN v_internal.vs_sub_comments s ON c.table_id = s.objectoid                    AND c.column_name = s.childobject                WHERE table_schema = '{db_name}' AND table_name = '{table_name}'                \"\"\"            )        )"}], "VerticaConnector.get_database_names -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_vertica.py", "sink": "execute", "line": 233, "expr": "session.execute(text(\"SELECT schema_name FROM v_catalog.schemata;\"))"}], "VerticaConnector.get_current_db_name -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_vertica.py", "sink": "execute", "line": 239, "expr": "self.session.execute(text(\"SELECT current_schema()\"))"}], "VerticaConnector.table_simple_info -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/rdbms/conn_vertica.py", "sink": "execute", "line": 250, "expr": "self.session.execute(text(_sql))"}], "ConnectConfigDao.add_url_db -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/manages/connect_config_db.py", "sink": "execute", "line": 103, "expr": "session.execute(insert_statement, params)"}], "ConnectConfigDao.add_file_db -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/manages/connect_config_db.py", "sink": "execute", "line": 142, "expr": "session.execute(insert_statement, params)"}], "ConnectConfigDao.update_db_info -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/manages/connect_config_db.py", "sink": "execute", "line": 178, "expr": "session.execute(update_statement)"}], "ConnectConfigDao.update_db_info -> ConnectConfigDao.get_db_config -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/manages/connect_config_db.py", "sink": "execute", "line": 201, "expr": "session.execute(select_statement, params)"}], "ConnectConfigDao.get_db_config -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/manages/connect_config_db.py", "sink": "execute", "line": 201, "expr": "session.execute(select_statement, params)"}], "ConnectConfigDao.get_db_list -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/manages/connect_config_db.py", "sink": "execute", "line": 226, "expr": "session.execute(text(sql))"}], "ConnectConfigDao.delete_db -> execute": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/datasource/manages/connect_config_db.py", "sink": "execute", "line": 241, "expr": "session.execute(delete_statement, params)"}], "ModelRegistryClient.get_all_model_instances -> _api_remote.decorator.wrapper -> request": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/api_utils.py", "sink": "request", "line": 223, "expr": "client.request(**request_params)"}], "plugin_hub_update -> PluginHub.refresh_hub_from_git -> update_from_git -> get": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/agent/resource/tool/autogpt/plugins_util.py", "sink": "get", "line": 162, "expr": "session.get(            url,            headers=headers,        )"}], "ElevenLabsSpeech._speech -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/speech/eleven_labs.py", "sink": "post", "line": 79, "expr": "requests.post(tts_url, headers=self._headers, json={\"text\": text})"}], "HuggingFaceInferenceAPIEmbeddings.embed_documents -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/rag/embedding/embeddings.py", "sink": "post", "line": 404, "expr": "requests.post(            self._api_url,            headers=self._headers,            json={                \"inputs\": texts,                \"options\": {\"wait_for_model\": True, \"use_cache\": True},            },        )"}], "HuggingFaceInferenceAPIEmbeddings.embed_query -> HuggingFaceInferenceAPIEmbeddings.embed_documents -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/rag/embedding/embeddings.py", "sink": "post", "line": 404, "expr": "requests.post(            self._api_url,            headers=self._headers,            json={                \"inputs\": texts,                \"options\": {\"wait_for_model\": True, \"use_cache\": True},            },        )"}], "DictHTTPSender.map -> request": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/core/awel/trigger/ext_http_trigger.py", "sink": "request", "line": 192, "expr": "session.request(                method,                self._address,                raise_for_status=False,                **req_kwargs,            )"}], "SimpleDistributedStorage.load -> get": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/core/interface/file.py", "sink": "get", "line": 719, "expr": "requests.get(                f\"http://{node_address}{self._api_prefix}/{bucket}/{file_id}\",                timeout=self._transfer_timeout,                stream=True,            )"}], "IndicatorAction.run -> get": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/agent/expand/actions/indicator_action.py", "sink": "get", "line": 118, "expr": "requests.get(                        param.api, params=param.args, headers=self.build_headers()                    )"}], "IndicatorAction.run -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/agent/expand/actions/indicator_action.py", "sink": "post", "line": 122, "expr": "requests.post(                        param.api, json=param.args, headers=self.build_headers()                    )"}], "IndicatorAction.run -> request": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/agent/expand/actions/indicator_action.py", "sink": "request", "line": 126, "expr": "requests.request(                        param.method.lower(),                        param.api,                        data=param.args,                        headers=self.build_headers(),                    )"}], "load -> knowledge_init -> KnowledgeApiClient.space_add -> KnowledgeApiClient.space_list -> ApiClient._post -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/app/knowledge/_cli/knowledge_client.py", "sink": "post", "line": 47, "expr": "requests.post(url, data=json.dumps(data), headers=HTTP_HEADERS)"}], "delete -> knowledge_delete -> KnowledgeApiClient.document_delete -> KnowledgeApiClient.space_delete -> KnowledgeApiClient.space_list -> ApiClient._post -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/app/knowledge/_cli/knowledge_client.py", "sink": "post", "line": 47, "expr": "requests.post(url, data=json.dumps(data), headers=HTTP_HEADERS)"}], "ApiClient._post -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/app/knowledge/_cli/knowledge_client.py", "sink": "post", "line": 47, "expr": "requests.post(url, data=json.dumps(data), headers=HTTP_HEADERS)"}], "KnowledgeApiClient.space_add -> ApiClient._post -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/app/knowledge/_cli/knowledge_client.py", "sink": "post", "line": 47, "expr": "requests.post(url, data=json.dumps(data), headers=HTTP_HEADERS)"}], "KnowledgeApiClient.space_delete -> ApiClient._post -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/app/knowledge/_cli/knowledge_client.py", "sink": "post", "line": 47, "expr": "requests.post(url, data=json.dumps(data), headers=HTTP_HEADERS)"}], "KnowledgeApiClient.space_list -> ApiClient._post -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/app/knowledge/_cli/knowledge_client.py", "sink": "post", "line": 47, "expr": "requests.post(url, data=json.dumps(data), headers=HTTP_HEADERS)"}], "KnowledgeApiClient.document_add -> ApiClient._post -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/app/knowledge/_cli/knowledge_client.py", "sink": "post", "line": 47, "expr": "requests.post(url, data=json.dumps(data), headers=HTTP_HEADERS)"}], "KnowledgeApiClient.document_delete -> ApiClient._post -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/app/knowledge/_cli/knowledge_client.py", "sink": "post", "line": 47, "expr": "requests.post(url, data=json.dumps(data), headers=HTTP_HEADERS)"}], "KnowledgeApiClient.document_list -> ApiClient._post -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/app/knowledge/_cli/knowledge_client.py", "sink": "post", "line": 47, "expr": "requests.post(url, data=json.dumps(data), headers=HTTP_HEADERS)"}], "KnowledgeApiClient.document_upload -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/app/knowledge/_cli/knowledge_client.py", "sink": "post", "line": 88, "expr": "requests.post(url, data=data, files=files)"}], "KnowledgeApiClient.document_sync -> ApiClient._post -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/app/knowledge/_cli/knowledge_client.py", "sink": "post", "line": 47, "expr": "requests.post(url, data=json.dumps(data), headers=HTTP_HEADERS)"}], "KnowledgeApiClient.chunk_list -> ApiClient._post -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/app/knowledge/_cli/knowledge_client.py", "sink": "post", "line": 47, "expr": "requests.post(url, data=json.dumps(data), headers=HTTP_HEADERS)"}], "KnowledgeApiClient.similar_query -> ApiClient._post -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/app/knowledge/_cli/knowledge_client.py", "sink": "post", "line": 47, "expr": "requests.post(url, data=json.dumps(data), headers=HTTP_HEADERS)"}], "knowledge_init -> KnowledgeApiClient.space_add -> KnowledgeApiClient.space_list -> ApiClient._post -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/app/knowledge/_cli/knowledge_client.py", "sink": "post", "line": 47, "expr": "requests.post(url, data=json.dumps(data), headers=HTTP_HEADERS)"}], "knowledge_delete -> KnowledgeApiClient.document_delete -> KnowledgeApiClient.space_delete -> KnowledgeApiClient.space_list -> ApiClient._post -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/app/knowledge/_cli/knowledge_client.py", "sink": "post", "line": 47, "expr": "requests.post(url, data=json.dumps(data), headers=HTTP_HEADERS)"}], "ModelLoader.loader -> huggingface_loader -> load_huggingface_quantization_model -> eval": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/model/adapter/loader.py", "sink": "eval", "line": 317, "expr": "eval(\"torch.{}\".format(model_params.compute_dtype))"}], "ModelLoader.loader_with_params -> huggingface_loader -> load_huggingface_quantization_model -> eval": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/model/adapter/loader.py", "sink": "eval", "line": 317, "expr": "eval(\"torch.{}\".format(model_params.compute_dtype))"}], "huggingface_loader -> load_huggingface_quantization_model -> eval": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/model/adapter/loader.py", "sink": "eval", "line": 317, "expr": "eval(\"torch.{}\".format(model_params.compute_dtype))"}], "load_huggingface_quantization_model -> eval": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/model/adapter/loader.py", "sink": "eval", "line": 317, "expr": "eval(\"torch.{}\".format(model_params.compute_dtype))"}], "MacOSTTS._speech -> system": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/speech/macos_tts.py", "sink": "system", "line": 16, "expr": "os.system(f'say \"{text}\"')"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/speech/macos_tts.py", "sink": "system", "line": 18, "expr": "os.system(f'say -v \"Ava (Premium)\" \"{text}\"')"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/speech/macos_tts.py", "sink": "system", "line": 20, "expr": "os.system(f'say -v Samantha \"{text}\"')"}], "PluginHub.refresh_hub_from_git -> update_from_git -> get": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/agent/resource/tool/autogpt/plugins_util.py", "sink": "get", "line": 162, "expr": "session.get(            url,            headers=headers,        )"}], "update_from_git -> get": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/agent/resource/tool/autogpt/plugins_util.py", "sink": "get", "line": 162, "expr": "session.get(            url,            headers=headers,        )"}], "RemoteModelWorker.embeddings -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/model/cluster/worker/remote_worker.py", "sink": "post", "line": 138, "expr": "requests.post(            url,            headers=self._get_trace_headers(),            json=params,            timeout=self.timeout,        )"}], "add_repo -> clone_repo -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "Popen", "line": 168, "expr": "subprocess.Popen(        clone_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE    )"}], "clone_repo -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "Popen", "line": 168, "expr": "subprocess.Popen(        clone_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE    )"}], "update_repo -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "run", "line": 200, "expr": "subprocess.run([\"git\", \"pull\"], check=False)"}], "update_repo -> add_repo -> clone_repo -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "Popen", "line": 168, "expr": "subprocess.Popen(        clone_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE    )"}], "install -> copy_and_install -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "run", "line": 327, "expr": "subprocess.run([\"poetry\", \"build\"], check=True)"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "run", "line": 334, "expr": "subprocess.run([\"pip\", \"install\", str(wheel_file)], check=True)"}], "install -> check_with_retry -> update_repo -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "run", "line": 200, "expr": "subprocess.run([\"git\", \"pull\"], check=False)"}], "install -> check_with_retry -> update_repo -> add_repo -> clone_repo -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "Popen", "line": 168, "expr": "subprocess.Popen(        clone_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE    )"}], "uninstall -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "run", "line": 232, "expr": "subprocess.run([\"pip\", \"uninstall\", name, \"-y\"], check=True)"}], "inner_uninstall -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "Popen", "line": 249, "expr": "subprocess.Popen(        [\"pip\", \"uninstall\", name, \"-y\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE    )"}], "inner_copy_and_install -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "Popen", "line": 276, "expr": "subprocess.Popen(            [\"poetry\", \"build\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE        )"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "Popen", "line": 294, "expr": "subprocess.Popen(            [\"pip\", \"install\", str(wheel_file)],            stdout=subprocess.PIPE,            stderr=subprocess.PIPE,        )"}], "copy_and_install -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "run", "line": 327, "expr": "subprocess.run([\"poetry\", \"build\"], check=True)"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "run", "line": 334, "expr": "subprocess.run([\"pip\", \"install\", str(wheel_file)], check=True)"}], "check_with_retry -> update_repo -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "run", "line": 200, "expr": "subprocess.run([\"git\", \"pull\"], check=False)"}], "check_with_retry -> update_repo -> add_repo -> clone_repo -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "Popen", "line": 168, "expr": "subprocess.Popen(        clone_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE    )"}], "list_repo_apps -> update_repo -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "run", "line": 200, "expr": "subprocess.run([\"git\", \"pull\"], check=False)"}], "list_repo_apps -> update_repo -> add_repo -> clone_repo -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "Popen", "line": 168, "expr": "subprocess.Popen(        clone_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE    )"}], "update_repo_inner -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "Popen", "line": 449, "expr": "subprocess.Popen(        [\"git\", \"pull\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE    )"}], "update_repo_inner -> add_repo -> clone_repo -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "Popen", "line": 168, "expr": "subprocess.Popen(        clone_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE    )"}], "list_dbgpts -> update_repo_inner -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "Popen", "line": 449, "expr": "subprocess.Popen(        [\"git\", \"pull\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE    )"}], "list_dbgpts -> update_repo_inner -> add_repo -> clone_repo -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "Popen", "line": 168, "expr": "subprocess.Popen(        clone_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE    )"}], "baidu_search -> get": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/agent/expand/resources/search_tool.py", "sink": "get", "line": 44, "expr": "requests.get(url, headers=headers)"}], "Service.install_gpts -> inner_copy_and_install -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "Popen", "line": 276, "expr": "subprocess.Popen(            [\"poetry\", \"build\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE        )"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "Popen", "line": 294, "expr": "subprocess.Popen(            [\"pip\", \"install\", str(wheel_file)],            stdout=subprocess.PIPE,            stderr=subprocess.PIPE,        )"}], "Service.uninstall_gpts -> inner_uninstall -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "Popen", "line": 249, "expr": "subprocess.Popen(        [\"pip\", \"uninstall\", name, \"-y\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE    )"}], "Service.refresh_hub_from_git -> list_dbgpts -> update_repo_inner -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "Popen", "line": 449, "expr": "subprocess.Popen(        [\"git\", \"pull\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE    )"}], "Service.refresh_hub_from_git -> list_dbgpts -> update_repo_inner -> add_repo -> clone_repo -> Popen": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/repo.py", "sink": "Popen", "line": 168, "expr": "subprocess.Popen(        clone_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE    )"}], "get_latest_version -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/setup.py", "sink": "run", "line": 73, "expr": "subprocess.run(        command_index_versions, stdout=subprocess.PIPE, stderr=subprocess.PIPE    )"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/setup.py", "sink": "run", "line": 96, "expr": "subprocess.run(            command_simulate_install, stderr=subprocess.PIPE        )"}], "get_cpu_avx_support -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/setup.py", "sink": "run", "line": 198, "expr": "subprocess.run(                [\"lscpu\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE            )"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/setup.py", "sink": "run", "line": 204, "expr": "subprocess.run(            [\"sysctl\", \"-a\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE        )"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/system_utils.py", "sink": "run", "line": 63, "expr": "subprocess.run(            [\"lscpu\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE        )"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/system_utils.py", "sink": "run", "line": 70, "expr": "subprocess.run(            [\"sysctl\", \"-a\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE        )"}], "quantization_requires -> get_latest_version -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/setup.py", "sink": "run", "line": 73, "expr": "subprocess.run(        command_index_versions, stdout=subprocess.PIPE, stderr=subprocess.PIPE    )"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/setup.py", "sink": "run", "line": 96, "expr": "subprocess.run(            command_simulate_install, stderr=subprocess.PIPE        )"}], "get_cpu_info -> get_cpu_avx_support -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/system_utils.py", "sink": "run", "line": 63, "expr": "subprocess.run(            [\"lscpu\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE        )"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/system_utils.py", "sink": "run", "line": 70, "expr": "subprocess.run(            [\"sysctl\", \"-a\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE        )"}], "get_system_info -> get_cpu_info -> get_cpu_avx_support -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/system_utils.py", "sink": "run", "line": 63, "expr": "subprocess.run(            [\"lscpu\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE        )"}, {"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/system_utils.py", "sink": "run", "line": 70, "expr": "subprocess.run(            [\"sysctl\", \"-a\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE        )"}], "_create_poetry_project -> run": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/util/dbgpts/template.py", "sink": "run", "line": 184, "expr": "subprocess.run([\"poetry\", \"new\", name, \"-n\"], check=True)"}], "VicunaLLM._call -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/model/llm_out/vicuna_llm.py", "sink": "post", "line": 34, "expr": "requests.post(            url=urljoin(CFG.MODEL_SERVER, self.vicuna_generate_path),            data=json.dumps(params),        )"}], "VicunaEmbeddingLLM._call -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/model/llm_out/vicuna_llm.py", "sink": "post", "line": 62, "expr": "requests.post(            url=urljoin(CFG.MODEL_SERVER, self.vicuna_embedding_path),            json={\"prompt\": p},        )"}], "VicunaEmbeddingLLM.embed_documents -> VicunaEmbeddingLLM.embed_query -> VicunaEmbeddingLLM._call -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/model/llm_out/vicuna_llm.py", "sink": "post", "line": 62, "expr": "requests.post(            url=urljoin(CFG.MODEL_SERVER, self.vicuna_embedding_path),            json={\"prompt\": p},        )"}], "VicunaEmbeddingLLM.embed_query -> VicunaEmbeddingLLM._call -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/model/llm_out/vicuna_llm.py", "sink": "post", "line": 62, "expr": "requests.post(            url=urljoin(CFG.MODEL_SERVER, self.vicuna_embedding_path),            json={\"prompt\": p},        )"}], "WenxinLLMClient.sync_generate_stream -> post": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/model/proxy/llms/wenxin.py", "sink": "post", "line": 179, "expr": "requests.post(                proxy_server_url, headers=headers, json=payload, stream=True            )"}], "WenxinLLMClient.sync_generate_stream -> _build_access_token -> get": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/model/proxy/llms/wenxin.py", "sink": "get", "line": 48, "expr": "requests.get(url=url, params=params)"}], "_build_access_token -> get": [{"file_path": "C:/Users/cokebeer/Documents/llm/DB-GPT/dbgpt/model/proxy/llms/wenxin.py", "sink": "get", "line": 48, "expr": "requests.get(url=url, params=params)"}]}